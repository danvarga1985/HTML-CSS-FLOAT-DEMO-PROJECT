*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* make the property on the #body selector inherited for every element */
  box-sizing: inherit;
}

html {
  /* reference value for the "rem" values in the document */
  /* the desired font-size is 10px, the browser default is 16px */
  font-size: 62.5%;
}

body {
  box-sizing: border-box;
}

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInFromLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInFromRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
body {
  /* font properties are never defined under the "*" selector  */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777;
  padding: 3rem;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* backface-visibility: hidden; */
  margin-bottom: 6rem;
}
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInFromLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /*
      animation-delay: 3s;
      animation-iteration-count: 3;
      */
}
.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  /* shorthand syntax */
  animation: moveInFromRight 1s ease-out;
}

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /* rounded corners */
  border-radius: 10rem;
  /* all properties are enabled to be animated */
  transition: all 0.2s;
  /* set to relative, so that ".btn::after" won't refer to header */
  position: relative;
  font-size: 1.6rem;
}
.btn:hover {
  /* Upon hover, the button goes slightly up */
  transform: translateY(-0.3rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}
.btn:hover::after {
  /* change the size in different directions */
  transform: scaleX(1.4) scaleY(1.6);
  /* fade it out */
  opacity: 0;
}
.btn:active {
  /* When clicked on the button, it already went 3px up (hover) - upon click it goes down 2px compared to the hover state */
  transform: translateY(-0.1rem);
}
.btn--white {
  background-color: #fff;
  color: #777;
}
.btn--white::after {
  background-color: #fff;
}
.btn::after {
  /* #content is empty because its needed only for the white background */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  /* absolute compared to parent element (".btn:visited") */
  position: absolute;
  top: 0;
  left: 0;
  /* so that the text in the button is not covered by this */
  z-index: -1;
  transition: all 0.4s;
}
.btn--animated {
  animation: moveInButton 0.5s ease-out 0.75s;
  /* automatically apply the styles of the 0% before the animation starts - no more split-second visibility on screen during rendering */
  animation-fill-mode: backwards;
}

.row {
  max-width: 114rem;
  background-color: gold;
  margin: 0 auto;
}
.row:not(:last-child) {
  margin-bottom: 8rem;
}
.row::after {
  content: "";
  display: table;
  clear: both;
}
.row [class^=col-] {
  background-color: mediumaquamarine;
  float: left;
}
.row [class^=col-]:not(:last-child) {
  margin-right: 6rem;
}
.row .col-1-of-2 {
  width: calc((100% - 6rem) / 2);
}
.row .col-1-of-3 {
  width: calc((100% - (12rem)) / 3);
}
.row .col-1-of-4 {
  width: calc((100% - (18rem)) / 4);
}
.row .col-2-of-3 {
  width: calc( 2 * ((100% - (12rem))) / 3 + 6rem );
}
.row .col-2-of-4 {
  width: calc( 2 * ((100% - (18rem))) / 4 + 6rem );
}
.row .col-3-of-4 {
  width: calc( 3 * ((100% - (18rem))) / 4 + 2 * (6rem) );
}

.header {
  /* 95% of the viewport height */
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /* whatever the width of the viewport, the element will always fit inside the box */
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
}
.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}
.header__logo {
  height: 3.5rem;
}
.header__text-box {
  position: absolute;
  /* 1. top left corner of the element will start at the middle of the screen */
  top: 40%;
  left: 50%;
  /* 2. then shift the element back 50%, so that the element is in the middle of the screen */
  transform: translate(-50%, -50%);
  text-align: center;
}

/*# sourceMappingURL=style.css.map */
